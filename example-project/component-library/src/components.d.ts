/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AutocompleteTypes, Color, ComponentProps, ComponentRef, OverlayEventDetail, TextFieldTypes } from "./interfaces";
import { CheckboxChangeEventDetail } from "./components/my-checkbox/my-checkbox";
import { Baz, Foo, Grault, Quux, Waldo } from "./components/my-complex-props/my-complex-props";
import { Baz as Baz1, Foo as Foo1, Grault as Grault1, Quux as Quux1, Waldo as Waldo1 } from "./components/my-complex-props-scoped/my-complex-props-scoped";
import { IMyComponent } from "./components/helpers";
import { InputChangeEventDetail } from "./components/my-input/my-input";
import { InputChangeEventDetail as InputChangeEventDetail1 } from "./components/my-input-scoped/my-input-scoped";
import { RadioGroupChangeEventDetail } from "./components/my-radio-group/my-radio-group";
import { Color as Color1, StyleEventDetail } from "./components/element-interface";
import { RangeChangeEventDetail, RangeValue } from "./components/my-range/my-range";
export { AutocompleteTypes, Color, ComponentProps, ComponentRef, OverlayEventDetail, TextFieldTypes } from "./interfaces";
export { CheckboxChangeEventDetail } from "./components/my-checkbox/my-checkbox";
export { Baz, Foo, Grault, Quux, Waldo } from "./components/my-complex-props/my-complex-props";
export { Baz as Baz1, Foo as Foo1, Grault as Grault1, Quux as Quux1, Waldo as Waldo1 } from "./components/my-complex-props-scoped/my-complex-props-scoped";
export { IMyComponent } from "./components/helpers";
export { InputChangeEventDetail } from "./components/my-input/my-input";
export { InputChangeEventDetail as InputChangeEventDetail1 } from "./components/my-input-scoped/my-input-scoped";
export { RadioGroupChangeEventDetail } from "./components/my-radio-group/my-radio-group";
export { Color as Color1, StyleEventDetail } from "./components/element-interface";
export { RangeChangeEventDetail, RangeValue } from "./components/my-range/my-range";
export namespace Components {
    interface MyButton {
        /**
          * The type of button.
          * @default 'button'
         */
        "buttonType": string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
          * @default false
         */
        "disabled": boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download": string | undefined;
        /**
          * Set to `"block"` for a full-width button or to `"full"` for a full-width button without left and right borders.
         */
        "expand"?: 'full' | 'block';
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"` except inside of a toolbar, where the default is `"clear"`.
         */
        "fill"?: 'clear' | 'outline' | 'solid' | 'default';
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel": string | undefined;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, activates a button with a heavier font weight.
          * @default false
         */
        "strong": boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * The type of the button.
          * @default 'button'
         */
        "type": 'submit' | 'reset' | 'button';
    }
    interface MyButtonScoped {
        /**
          * The type of button.
          * @default 'button'
         */
        "buttonType": string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
          * @default false
         */
        "disabled": boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download": string | undefined;
        /**
          * Set to `"block"` for a full-width button or to `"full"` for a full-width button without left and right borders.
         */
        "expand"?: 'full' | 'block';
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"` except inside of a toolbar, where the default is `"clear"`.
         */
        "fill"?: 'clear' | 'outline' | 'solid' | 'default';
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel": string | undefined;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, activates a button with a heavier font weight.
          * @default false
         */
        "strong": boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * The type of the button.
          * @default 'button'
         */
        "type": 'submit' | 'reset' | 'button';
    }
    interface MyCheckbox {
        /**
          * How to control the alignment of the checkbox and label on the cross axis. `"start"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL. `"center"`: The label and control will appear at the center of the cross axis in both LTR and RTL. Setting this property will change the checkbox `display` to `block`.
         */
        "alignment"?: 'start' | 'center';
        /**
          * If `true`, the checkbox is selected.
          * @default false
         */
        "checked": boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: string;
        /**
          * If `true`, the user cannot interact with the checkbox.
          * @default false
         */
        "disabled": boolean;
        /**
          * If `true`, the checkbox will visually appear as indeterminate.
          * @default false
         */
        "indeterminate": boolean;
        /**
          * How to pack the label and checkbox within a line. `"start"`: The label and checkbox will appear on the left in LTR and on the right in RTL. `"end"`: The label and checkbox will appear on the right in LTR and on the left in RTL. `"space-between"`: The label and checkbox will appear on opposite ends of the line with space between the two elements. Setting this property will change the checkbox `display` to `block`.
         */
        "justify"?: 'start' | 'end' | 'space-between';
        /**
          * Where to place the label relative to the checkbox. `"start"`: The label will appear to the left of the checkbox in LTR and to the right in RTL. `"end"`: The label will appear to the right of the checkbox in LTR and to the left in RTL. `"fixed"`: The label has the same behavior as `"start"` except it also has a fixed width. Long text will be truncated with ellipses ("..."). `"stacked"`: The label will appear above the checkbox regardless of the direction. The alignment of the label can be controlled with the `alignment` property.
          * @default 'start'
         */
        "labelPlacement": 'start' | 'end' | 'fixed' | 'stacked';
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * The name of the control, which is submitted with the form data.
          * @default this.inputId
         */
        "name": string;
        "setFocus": () => Promise<void>;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
          * @default 'on'
         */
        "value": any | null;
    }
    interface MyComplexProps {
        /**
          * map objects
         */
        "baz": Baz;
        /**
          * basic object
         */
        "foo": Foo;
        /**
          * infinity
         */
        "grault": Grault;
        /**
          * set objects
         */
        "quux": Quux;
        /**
          * null
         */
        "waldo": Waldo;
    }
    interface MyComplexPropsScoped {
        /**
          * map objects
         */
        "baz": Baz1;
        /**
          * basic object
         */
        "foo": Foo1;
        /**
          * infinity
         */
        "grault": Grault1;
        /**
          * set objects
         */
        "quux": Quux1;
        /**
          * null
         */
        "waldo": Waldo1;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name (using kebab case name)
         */
        "middleName": string;
    }
    interface MyComponentScoped {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name (using kebab case name)
         */
        "middleName": string;
    }
    interface MyCounter {
        /**
          * The start value
         */
        "startValue": number;
    }
    interface MyInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
          * @default 'off'
         */
        "autocapitalize": string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
          * @default 'off'
         */
        "autocomplete": AutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
          * @default 'off'
         */
        "autocorrect": 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
          * @default false
         */
        "autofocus": boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
          * @default false
         */
        "clearInput": boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
          * @default false
         */
        "disabled": boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
          * @default this.inputId
         */
        "name": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
          * @default false
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @default false
         */
        "required": boolean;
        /**
          * Sets focus on the specified `my-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * If `true`, the element will have its spelling and grammar checked.
          * @default false
         */
        "spellcheck": boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is text.
          * @default 'text'
         */
        "type": TextFieldTypes;
        /**
          * The value of the input.
          * @default ''
         */
        "value"?: string | number | null;
    }
    interface MyInputScoped {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
          * @default 'off'
         */
        "autocapitalize": string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
          * @default 'off'
         */
        "autocomplete": AutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
          * @default 'off'
         */
        "autocorrect": 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
          * @default false
         */
        "autofocus": boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
          * @default false
         */
        "clearInput": boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
          * @default false
         */
        "disabled": boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
          * @default this.inputId
         */
        "name": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
          * @default false
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @default false
         */
        "required": boolean;
        /**
          * Sets focus on the specified `my-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * If `true`, the element will have its spelling and grammar checked.
          * @default false
         */
        "spellcheck": boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is text.
          * @default 'text'
         */
        "type": TextFieldTypes;
        /**
          * The value of the input.
          * @default ''
         */
        "value"?: string | number | null;
    }
    interface MyList {
    }
    interface MyListItem {
    }
    interface MyListItemScoped {
    }
    interface MyListScoped {
    }
    interface MyPopover {
        /**
          * If `true`, the popover will animate.
          * @default true
         */
        "animated": boolean;
        /**
          * If `true`, the popover will be dismissed when the backdrop is clicked.
          * @default true
         */
        "backdropDismiss": boolean;
        /**
          * The component to display inside of the popover.
         */
        "component": ComponentRef;
        /**
          * The data to pass to the popover component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        /**
          * Dismiss the popover overlay after it has been presented.
          * @param data Any data to emit in the dismiss events.
          * @param role The role of the element that is dismissing the popover. For example, 'cancel' or 'backdrop'.
         */
        "dismiss": (_data?: any, _role?: string) => Promise<boolean>;
        /**
          * The event to pass to the popover animation.
         */
        "event": any;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
          * @default true
         */
        "keyboardClose": boolean;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Returns a promise that resolves when the popover did dismiss.
         */
        "onDidDismiss": () => Promise<OverlayEventDetail>;
        /**
          * Returns a promise that resolves when the popover will dismiss.
         */
        "onWillDismiss": () => Promise<OverlayEventDetail>;
        /**
          * Present the popover overlay after it has been created.
         */
        "present": () => Promise<void>;
        /**
          * If `true`, a backdrop will be displayed behind the popover.
          * @default true
         */
        "showBackdrop": boolean;
        /**
          * If `true`, the popover will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
          * @default false
         */
        "translucent": boolean;
    }
    interface MyRadio {
        /**
          * How to control the alignment of the radio and label on the cross axis. `"start"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL. `"center"`: The label and control will appear at the center of the cross axis in both LTR and RTL. Setting this property will change the radio `display` to `block`.
         */
        "alignment"?: 'start' | 'center';
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: string;
        /**
          * If `true`, the user cannot interact with the radio.
          * @default false
         */
        "disabled": boolean;
        /**
          * How to pack the label and radio within a line. `"start"`: The label and radio will appear on the left in LTR and on the right in RTL. `"end"`: The label and radio will appear on the right in LTR and on the left in RTL. `"space-between"`: The label and radio will appear on opposite ends of the line with space between the two elements. Setting this property will change the radio `display` to `block`.
         */
        "justify"?: 'start' | 'end' | 'space-between';
        /**
          * Where to place the label relative to the radio. `"start"`: The label will appear to the left of the radio in LTR and to the right in RTL. `"end"`: The label will appear to the right of the radio in LTR and to the left in RTL. `"fixed"`: The label has the same behavior as `"start"` except it also has a fixed width. Long text will be truncated with ellipses ("..."). `"stacked"`: The label will appear above the radio regardless of the direction. The alignment of the label can be controlled with the `alignment` property.
          * @default 'start'
         */
        "labelPlacement": 'start' | 'end' | 'fixed' | 'stacked';
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * The name of the control, which is submitted with the form data.
          * @default this.inputId
         */
        "name": string;
        "setButtonTabindex": (value: number) => Promise<void>;
        "setFocus": (ev?: globalThis.Event) => Promise<void>;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface MyRadioGroup {
        /**
          * If `true`, the radios can be deselected.
          * @default false
         */
        "allowEmptySelection": boolean;
        /**
          * This property allows developers to specify a custom function or property name for comparing objects when determining the selected option in the ion-radio-group. When not specified, the default behavior will use strict equality (===) for comparison.
         */
        "compareWith"?: string | Function | null;
        /**
          * The name of the control, which is submitted with the form data.
          * @default this.inputId
         */
        "name": string;
        "setFocus": () => Promise<void>;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    interface MyRange {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color1;
        /**
          * How long, in milliseconds, to wait to trigger the `myChange` event after each change in the range value.
          * @default 0
         */
        "debounce": number;
        /**
          * If `true`, the user cannot interact with the range.
          * @default false
         */
        "disabled": boolean;
        /**
          * Show two knobs.
          * @default false
         */
        "dualKnobs": boolean;
        /**
          * Maximum integer value of the range.
          * @default 100
         */
        "max": number;
        /**
          * Minimum integer value of the range.
          * @default 0
         */
        "min": number;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * The name of the control, which is submitted with the form data.
          * @default ''
         */
        "name": string;
        /**
          * If `true`, a pin with integer value is shown when the knob is pressed.
          * @default false
         */
        "pin": boolean;
        /**
          * If `true`, the knob snaps to tick marks evenly spaced based on the step property value.
          * @default false
         */
        "snaps": boolean;
        /**
          * Specifies the value granularity.
          * @default 1
         */
        "step": number;
        /**
          * If `true`, tick marks are displayed based on the step value. Only applies when `snaps` is `true`.
          * @default true
         */
        "ticks": boolean;
        /**
          * the value of the range.
          * @default 0
         */
        "value": RangeValue;
    }
    interface MyToggle {
    }
    interface MyToggleContent {
        "visible": boolean;
    }
}
export interface MyButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyButtonElement;
}
export interface MyButtonScopedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyButtonScopedElement;
}
export interface MyCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyCheckboxElement;
}
export interface MyComponentScopedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyComponentScopedElement;
}
export interface MyCounterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyCounterElement;
}
export interface MyInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyInputElement;
}
export interface MyInputScopedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyInputScopedElement;
}
export interface MyPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyPopoverElement;
}
export interface MyRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyRadioElement;
}
export interface MyRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyRadioGroupElement;
}
export interface MyRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyRangeElement;
}
declare global {
    interface HTMLMyButtonElementEventMap {
        "myFocus": void;
        "myBlur": void;
    }
    interface HTMLMyButtonElement extends Components.MyButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyButtonElementEventMap>(type: K, listener: (this: HTMLMyButtonElement, ev: MyButtonCustomEvent<HTMLMyButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyButtonElementEventMap>(type: K, listener: (this: HTMLMyButtonElement, ev: MyButtonCustomEvent<HTMLMyButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyButtonElement: {
        prototype: HTMLMyButtonElement;
        new (): HTMLMyButtonElement;
    };
    interface HTMLMyButtonScopedElementEventMap {
        "myFocus": void;
        "myBlur": void;
    }
    interface HTMLMyButtonScopedElement extends Components.MyButtonScoped, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyButtonScopedElementEventMap>(type: K, listener: (this: HTMLMyButtonScopedElement, ev: MyButtonScopedCustomEvent<HTMLMyButtonScopedElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyButtonScopedElementEventMap>(type: K, listener: (this: HTMLMyButtonScopedElement, ev: MyButtonScopedCustomEvent<HTMLMyButtonScopedElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyButtonScopedElement: {
        prototype: HTMLMyButtonScopedElement;
        new (): HTMLMyButtonScopedElement;
    };
    interface HTMLMyCheckboxElementEventMap {
        "ionChange": CheckboxChangeEventDetail;
        "ionFocus": void;
        "ionBlur": void;
    }
    interface HTMLMyCheckboxElement extends Components.MyCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyCheckboxElementEventMap>(type: K, listener: (this: HTMLMyCheckboxElement, ev: MyCheckboxCustomEvent<HTMLMyCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyCheckboxElementEventMap>(type: K, listener: (this: HTMLMyCheckboxElement, ev: MyCheckboxCustomEvent<HTMLMyCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyCheckboxElement: {
        prototype: HTMLMyCheckboxElement;
        new (): HTMLMyCheckboxElement;
    };
    interface HTMLMyComplexPropsElement extends Components.MyComplexProps, HTMLStencilElement {
    }
    var HTMLMyComplexPropsElement: {
        prototype: HTMLMyComplexPropsElement;
        new (): HTMLMyComplexPropsElement;
    };
    interface HTMLMyComplexPropsScopedElement extends Components.MyComplexPropsScoped, HTMLStencilElement {
    }
    var HTMLMyComplexPropsScopedElement: {
        prototype: HTMLMyComplexPropsScopedElement;
        new (): HTMLMyComplexPropsScopedElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLMyComponentScopedElementEventMap {
        "myCustomEvent": IMyComponent.someVar;
    }
    interface HTMLMyComponentScopedElement extends Components.MyComponentScoped, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyComponentScopedElementEventMap>(type: K, listener: (this: HTMLMyComponentScopedElement, ev: MyComponentScopedCustomEvent<HTMLMyComponentScopedElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyComponentScopedElementEventMap>(type: K, listener: (this: HTMLMyComponentScopedElement, ev: MyComponentScopedCustomEvent<HTMLMyComponentScopedElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyComponentScopedElement: {
        prototype: HTMLMyComponentScopedElement;
        new (): HTMLMyComponentScopedElement;
    };
    interface HTMLMyCounterElementEventMap {
        "count": number;
    }
    interface HTMLMyCounterElement extends Components.MyCounter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyCounterElementEventMap>(type: K, listener: (this: HTMLMyCounterElement, ev: MyCounterCustomEvent<HTMLMyCounterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyCounterElementEventMap>(type: K, listener: (this: HTMLMyCounterElement, ev: MyCounterCustomEvent<HTMLMyCounterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyCounterElement: {
        prototype: HTMLMyCounterElement;
        new (): HTMLMyCounterElement;
    };
    interface HTMLMyInputElementEventMap {
        "myInput": KeyboardEvent;
        "myChange": InputChangeEventDetail;
        "myBlur": void;
        "myFocus": void;
    }
    interface HTMLMyInputElement extends Components.MyInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyInputElementEventMap>(type: K, listener: (this: HTMLMyInputElement, ev: MyInputCustomEvent<HTMLMyInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyInputElementEventMap>(type: K, listener: (this: HTMLMyInputElement, ev: MyInputCustomEvent<HTMLMyInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyInputElement: {
        prototype: HTMLMyInputElement;
        new (): HTMLMyInputElement;
    };
    interface HTMLMyInputScopedElementEventMap {
        "myInput": KeyboardEvent;
        "myChange": InputChangeEventDetail1;
        "myBlur": void;
        "myFocus": void;
    }
    interface HTMLMyInputScopedElement extends Components.MyInputScoped, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyInputScopedElementEventMap>(type: K, listener: (this: HTMLMyInputScopedElement, ev: MyInputScopedCustomEvent<HTMLMyInputScopedElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyInputScopedElementEventMap>(type: K, listener: (this: HTMLMyInputScopedElement, ev: MyInputScopedCustomEvent<HTMLMyInputScopedElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyInputScopedElement: {
        prototype: HTMLMyInputScopedElement;
        new (): HTMLMyInputScopedElement;
    };
    interface HTMLMyListElement extends Components.MyList, HTMLStencilElement {
    }
    var HTMLMyListElement: {
        prototype: HTMLMyListElement;
        new (): HTMLMyListElement;
    };
    interface HTMLMyListItemElement extends Components.MyListItem, HTMLStencilElement {
    }
    var HTMLMyListItemElement: {
        prototype: HTMLMyListItemElement;
        new (): HTMLMyListItemElement;
    };
    interface HTMLMyListItemScopedElement extends Components.MyListItemScoped, HTMLStencilElement {
    }
    var HTMLMyListItemScopedElement: {
        prototype: HTMLMyListItemScopedElement;
        new (): HTMLMyListItemScopedElement;
    };
    interface HTMLMyListScopedElement extends Components.MyListScoped, HTMLStencilElement {
    }
    var HTMLMyListScopedElement: {
        prototype: HTMLMyListScopedElement;
        new (): HTMLMyListScopedElement;
    };
    interface HTMLMyPopoverElementEventMap {
        "myPopoverDidPresent": void;
        "myPopoverWillPresent": void;
        "myPopoverWillDismiss": OverlayEventDetail;
        "myPopoverDidDismiss": OverlayEventDetail;
    }
    interface HTMLMyPopoverElement extends Components.MyPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyPopoverElementEventMap>(type: K, listener: (this: HTMLMyPopoverElement, ev: MyPopoverCustomEvent<HTMLMyPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyPopoverElementEventMap>(type: K, listener: (this: HTMLMyPopoverElement, ev: MyPopoverCustomEvent<HTMLMyPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyPopoverElement: {
        prototype: HTMLMyPopoverElement;
        new (): HTMLMyPopoverElement;
    };
    interface HTMLMyRadioElementEventMap {
        "ionFocus": void;
        "ionBlur": void;
    }
    interface HTMLMyRadioElement extends Components.MyRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyRadioElementEventMap>(type: K, listener: (this: HTMLMyRadioElement, ev: MyRadioCustomEvent<HTMLMyRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyRadioElementEventMap>(type: K, listener: (this: HTMLMyRadioElement, ev: MyRadioCustomEvent<HTMLMyRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyRadioElement: {
        prototype: HTMLMyRadioElement;
        new (): HTMLMyRadioElement;
    };
    interface HTMLMyRadioGroupElementEventMap {
        "myChange": RadioGroupChangeEventDetail;
        "myValueChange": RadioGroupChangeEventDetail;
    }
    interface HTMLMyRadioGroupElement extends Components.MyRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyRadioGroupElementEventMap>(type: K, listener: (this: HTMLMyRadioGroupElement, ev: MyRadioGroupCustomEvent<HTMLMyRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyRadioGroupElementEventMap>(type: K, listener: (this: HTMLMyRadioGroupElement, ev: MyRadioGroupCustomEvent<HTMLMyRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyRadioGroupElement: {
        prototype: HTMLMyRadioGroupElement;
        new (): HTMLMyRadioGroupElement;
    };
    interface HTMLMyRangeElementEventMap {
        "myChange": RangeChangeEventDetail;
        "myStyle": StyleEventDetail;
        "myFocus": void;
        "myBlur": void;
    }
    interface HTMLMyRangeElement extends Components.MyRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyRangeElementEventMap>(type: K, listener: (this: HTMLMyRangeElement, ev: MyRangeCustomEvent<HTMLMyRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyRangeElementEventMap>(type: K, listener: (this: HTMLMyRangeElement, ev: MyRangeCustomEvent<HTMLMyRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyRangeElement: {
        prototype: HTMLMyRangeElement;
        new (): HTMLMyRangeElement;
    };
    interface HTMLMyToggleElement extends Components.MyToggle, HTMLStencilElement {
    }
    var HTMLMyToggleElement: {
        prototype: HTMLMyToggleElement;
        new (): HTMLMyToggleElement;
    };
    interface HTMLMyToggleContentElement extends Components.MyToggleContent, HTMLStencilElement {
    }
    var HTMLMyToggleContentElement: {
        prototype: HTMLMyToggleContentElement;
        new (): HTMLMyToggleContentElement;
    };
    interface HTMLElementTagNameMap {
        "my-button": HTMLMyButtonElement;
        "my-button-scoped": HTMLMyButtonScopedElement;
        "my-checkbox": HTMLMyCheckboxElement;
        "my-complex-props": HTMLMyComplexPropsElement;
        "my-complex-props-scoped": HTMLMyComplexPropsScopedElement;
        "my-component": HTMLMyComponentElement;
        "my-component-scoped": HTMLMyComponentScopedElement;
        "my-counter": HTMLMyCounterElement;
        "my-input": HTMLMyInputElement;
        "my-input-scoped": HTMLMyInputScopedElement;
        "my-list": HTMLMyListElement;
        "my-list-item": HTMLMyListItemElement;
        "my-list-item-scoped": HTMLMyListItemScopedElement;
        "my-list-scoped": HTMLMyListScopedElement;
        "my-popover": HTMLMyPopoverElement;
        "my-radio": HTMLMyRadioElement;
        "my-radio-group": HTMLMyRadioGroupElement;
        "my-range": HTMLMyRangeElement;
        "my-toggle": HTMLMyToggleElement;
        "my-toggle-content": HTMLMyToggleContentElement;
    }
}
declare namespace LocalJSX {
    interface MyButton {
        /**
          * The type of button.
          * @default 'button'
         */
        "buttonType"?: string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download"?: string | undefined;
        /**
          * Set to `"block"` for a full-width button or to `"full"` for a full-width button without left and right borders.
         */
        "expand"?: 'full' | 'block';
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"` except inside of a toolbar, where the default is `"clear"`.
         */
        "fill"?: 'clear' | 'outline' | 'solid' | 'default';
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Emitted when the button loses focus.
         */
        "onMyBlur"?: (event: MyButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onMyFocus"?: (event: MyButtonCustomEvent<void>) => void;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string | undefined;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, activates a button with a heavier font weight.
          * @default false
         */
        "strong"?: boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * The type of the button.
          * @default 'button'
         */
        "type"?: 'submit' | 'reset' | 'button';
    }
    interface MyButtonScoped {
        /**
          * The type of button.
          * @default 'button'
         */
        "buttonType"?: string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download"?: string | undefined;
        /**
          * Set to `"block"` for a full-width button or to `"full"` for a full-width button without left and right borders.
         */
        "expand"?: 'full' | 'block';
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"` except inside of a toolbar, where the default is `"clear"`.
         */
        "fill"?: 'clear' | 'outline' | 'solid' | 'default';
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Emitted when the button loses focus.
         */
        "onMyBlur"?: (event: MyButtonScopedCustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onMyFocus"?: (event: MyButtonScopedCustomEvent<void>) => void;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string | undefined;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, activates a button with a heavier font weight.
          * @default false
         */
        "strong"?: boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * The type of the button.
          * @default 'button'
         */
        "type"?: 'submit' | 'reset' | 'button';
    }
    interface MyCheckbox {
        /**
          * How to control the alignment of the checkbox and label on the cross axis. `"start"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL. `"center"`: The label and control will appear at the center of the cross axis in both LTR and RTL. Setting this property will change the checkbox `display` to `block`.
         */
        "alignment"?: 'start' | 'center';
        /**
          * If `true`, the checkbox is selected.
          * @default false
         */
        "checked"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: string;
        /**
          * If `true`, the user cannot interact with the checkbox.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * If `true`, the checkbox will visually appear as indeterminate.
          * @default false
         */
        "indeterminate"?: boolean;
        /**
          * How to pack the label and checkbox within a line. `"start"`: The label and checkbox will appear on the left in LTR and on the right in RTL. `"end"`: The label and checkbox will appear on the right in LTR and on the left in RTL. `"space-between"`: The label and checkbox will appear on opposite ends of the line with space between the two elements. Setting this property will change the checkbox `display` to `block`.
         */
        "justify"?: 'start' | 'end' | 'space-between';
        /**
          * Where to place the label relative to the checkbox. `"start"`: The label will appear to the left of the checkbox in LTR and to the right in RTL. `"end"`: The label will appear to the right of the checkbox in LTR and to the left in RTL. `"fixed"`: The label has the same behavior as `"start"` except it also has a fixed width. Long text will be truncated with ellipses ("..."). `"stacked"`: The label will appear above the checkbox regardless of the direction. The alignment of the label can be controlled with the `alignment` property.
          * @default 'start'
         */
        "labelPlacement"?: 'start' | 'end' | 'fixed' | 'stacked';
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * The name of the control, which is submitted with the form data.
          * @default this.inputId
         */
        "name"?: string;
        /**
          * Emitted when the checkbox loses focus.
         */
        "onIonBlur"?: (event: MyCheckboxCustomEvent<void>) => void;
        /**
          * Emitted when the checked property has changed as a result of a user action such as a click.  This event will not emit when programmatically setting the `checked` property.
         */
        "onIonChange"?: (event: MyCheckboxCustomEvent<CheckboxChangeEventDetail>) => void;
        /**
          * Emitted when the checkbox has focus.
         */
        "onIonFocus"?: (event: MyCheckboxCustomEvent<void>) => void;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
          * @default 'on'
         */
        "value"?: any | null;
    }
    interface MyComplexProps {
        /**
          * map objects
         */
        "baz"?: Baz;
        /**
          * basic object
         */
        "foo"?: Foo;
        /**
          * infinity
         */
        "grault"?: Grault;
        /**
          * set objects
         */
        "quux"?: Quux;
        /**
          * null
         */
        "waldo"?: Waldo;
    }
    interface MyComplexPropsScoped {
        /**
          * map objects
         */
        "baz"?: Baz1;
        /**
          * basic object
         */
        "foo"?: Foo1;
        /**
          * infinity
         */
        "grault"?: Grault1;
        /**
          * set objects
         */
        "quux"?: Quux1;
        /**
          * null
         */
        "waldo"?: Waldo1;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name (using kebab case name)
         */
        "middleName"?: string;
    }
    interface MyComponentScoped {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name (using kebab case name)
         */
        "middleName"?: string;
        /**
          * Testing an event without value
         */
        "onMyCustomEvent"?: (event: MyComponentScopedCustomEvent<IMyComponent.someVar>) => void;
    }
    interface MyCounter {
        /**
          * Emitted when the count changes
         */
        "onCount"?: (event: MyCounterCustomEvent<number>) => void;
        /**
          * The start value
         */
        "startValue"?: number;
    }
    interface MyInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
          * @default 'off'
         */
        "autocapitalize"?: string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
          * @default 'off'
         */
        "autocomplete"?: AutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
          * @default 'off'
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
          * @default false
         */
        "autofocus"?: boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
          * @default false
         */
        "clearInput"?: boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
          * @default this.inputId
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onMyBlur"?: (event: MyInputCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onMyChange"?: (event: MyInputCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onMyFocus"?: (event: MyInputCustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onMyInput"?: (event: MyInputCustomEvent<KeyboardEvent>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @default false
         */
        "required"?: boolean;
        /**
          * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * If `true`, the element will have its spelling and grammar checked.
          * @default false
         */
        "spellcheck"?: boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is text.
          * @default 'text'
         */
        "type"?: TextFieldTypes;
        /**
          * The value of the input.
          * @default ''
         */
        "value"?: string | number | null;
    }
    interface MyInputScoped {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
          * @default 'off'
         */
        "autocapitalize"?: string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
          * @default 'off'
         */
        "autocomplete"?: AutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
          * @default 'off'
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
          * @default false
         */
        "autofocus"?: boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
          * @default false
         */
        "clearInput"?: boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
          * @default this.inputId
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onMyBlur"?: (event: MyInputScopedCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onMyChange"?: (event: MyInputScopedCustomEvent<InputChangeEventDetail1>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onMyFocus"?: (event: MyInputScopedCustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onMyInput"?: (event: MyInputScopedCustomEvent<KeyboardEvent>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @default false
         */
        "required"?: boolean;
        /**
          * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * If `true`, the element will have its spelling and grammar checked.
          * @default false
         */
        "spellcheck"?: boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is text.
          * @default 'text'
         */
        "type"?: TextFieldTypes;
        /**
          * The value of the input.
          * @default ''
         */
        "value"?: string | number | null;
    }
    interface MyList {
    }
    interface MyListItem {
    }
    interface MyListItemScoped {
    }
    interface MyListScoped {
    }
    interface MyPopover {
        /**
          * If `true`, the popover will animate.
          * @default true
         */
        "animated"?: boolean;
        /**
          * If `true`, the popover will be dismissed when the backdrop is clicked.
          * @default true
         */
        "backdropDismiss"?: boolean;
        /**
          * The component to display inside of the popover.
         */
        "component": ComponentRef;
        /**
          * The data to pass to the popover component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        /**
          * The event to pass to the popover animation.
         */
        "event"?: any;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
          * @default true
         */
        "keyboardClose"?: boolean;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Emitted after the popover has dismissed.
         */
        "onMyPopoverDidDismiss"?: (event: MyPopoverCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the popover has presented.
         */
        "onMyPopoverDidPresent"?: (event: MyPopoverCustomEvent<void>) => void;
        /**
          * Emitted before the popover has dismissed.
         */
        "onMyPopoverWillDismiss"?: (event: MyPopoverCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the popover has presented.
         */
        "onMyPopoverWillPresent"?: (event: MyPopoverCustomEvent<void>) => void;
        /**
          * If `true`, a backdrop will be displayed behind the popover.
          * @default true
         */
        "showBackdrop"?: boolean;
        /**
          * If `true`, the popover will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
          * @default false
         */
        "translucent"?: boolean;
    }
    interface MyRadio {
        /**
          * How to control the alignment of the radio and label on the cross axis. `"start"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL. `"center"`: The label and control will appear at the center of the cross axis in both LTR and RTL. Setting this property will change the radio `display` to `block`.
         */
        "alignment"?: 'start' | 'center';
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: string;
        /**
          * If `true`, the user cannot interact with the radio.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * How to pack the label and radio within a line. `"start"`: The label and radio will appear on the left in LTR and on the right in RTL. `"end"`: The label and radio will appear on the right in LTR and on the left in RTL. `"space-between"`: The label and radio will appear on opposite ends of the line with space between the two elements. Setting this property will change the radio `display` to `block`.
         */
        "justify"?: 'start' | 'end' | 'space-between';
        /**
          * Where to place the label relative to the radio. `"start"`: The label will appear to the left of the radio in LTR and to the right in RTL. `"end"`: The label will appear to the right of the radio in LTR and to the left in RTL. `"fixed"`: The label has the same behavior as `"start"` except it also has a fixed width. Long text will be truncated with ellipses ("..."). `"stacked"`: The label will appear above the radio regardless of the direction. The alignment of the label can be controlled with the `alignment` property.
          * @default 'start'
         */
        "labelPlacement"?: 'start' | 'end' | 'fixed' | 'stacked';
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * The name of the control, which is submitted with the form data.
          * @default this.inputId
         */
        "name"?: string;
        /**
          * Emitted when the radio button loses focus.
         */
        "onIonBlur"?: (event: MyRadioCustomEvent<void>) => void;
        /**
          * Emitted when the radio button has focus.
         */
        "onIonFocus"?: (event: MyRadioCustomEvent<void>) => void;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface MyRadioGroup {
        /**
          * If `true`, the radios can be deselected.
          * @default false
         */
        "allowEmptySelection"?: boolean;
        /**
          * This property allows developers to specify a custom function or property name for comparing objects when determining the selected option in the ion-radio-group. When not specified, the default behavior will use strict equality (===) for comparison.
         */
        "compareWith"?: string | Function | null;
        /**
          * The name of the control, which is submitted with the form data.
          * @default this.inputId
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.  This event will not emit when programmatically setting the `value` property.
         */
        "onMyChange"?: (event: MyRadioGroupCustomEvent<RadioGroupChangeEventDetail>) => void;
        /**
          * Emitted when the `value` property has changed. This is used to ensure that `ion-radio` can respond to any value property changes from the group.
         */
        "onMyValueChange"?: (event: MyRadioGroupCustomEvent<RadioGroupChangeEventDetail>) => void;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    interface MyRange {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color1;
        /**
          * How long, in milliseconds, to wait to trigger the `myChange` event after each change in the range value.
          * @default 0
         */
        "debounce"?: number;
        /**
          * If `true`, the user cannot interact with the range.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Show two knobs.
          * @default false
         */
        "dualKnobs"?: boolean;
        /**
          * Maximum integer value of the range.
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum integer value of the range.
          * @default 0
         */
        "min"?: number;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * The name of the control, which is submitted with the form data.
          * @default ''
         */
        "name"?: string;
        /**
          * Emitted when the range loses focus.
         */
        "onMyBlur"?: (event: MyRangeCustomEvent<void>) => void;
        /**
          * Emitted when the value property has changed.
         */
        "onMyChange"?: (event: MyRangeCustomEvent<RangeChangeEventDetail>) => void;
        /**
          * Emitted when the range has focus.
         */
        "onMyFocus"?: (event: MyRangeCustomEvent<void>) => void;
        /**
          * Emitted when the styles change.
         */
        "onMyStyle"?: (event: MyRangeCustomEvent<StyleEventDetail>) => void;
        /**
          * If `true`, a pin with integer value is shown when the knob is pressed.
          * @default false
         */
        "pin"?: boolean;
        /**
          * If `true`, the knob snaps to tick marks evenly spaced based on the step property value.
          * @default false
         */
        "snaps"?: boolean;
        /**
          * Specifies the value granularity.
          * @default 1
         */
        "step"?: number;
        /**
          * If `true`, tick marks are displayed based on the step value. Only applies when `snaps` is `true`.
          * @default true
         */
        "ticks"?: boolean;
        /**
          * the value of the range.
          * @default 0
         */
        "value"?: RangeValue;
    }
    interface MyToggle {
    }
    interface MyToggleContent {
        "visible"?: boolean;
    }
    interface IntrinsicElements {
        "my-button": MyButton;
        "my-button-scoped": MyButtonScoped;
        "my-checkbox": MyCheckbox;
        "my-complex-props": MyComplexProps;
        "my-complex-props-scoped": MyComplexPropsScoped;
        "my-component": MyComponent;
        "my-component-scoped": MyComponentScoped;
        "my-counter": MyCounter;
        "my-input": MyInput;
        "my-input-scoped": MyInputScoped;
        "my-list": MyList;
        "my-list-item": MyListItem;
        "my-list-item-scoped": MyListItemScoped;
        "my-list-scoped": MyListScoped;
        "my-popover": MyPopover;
        "my-radio": MyRadio;
        "my-radio-group": MyRadioGroup;
        "my-range": MyRange;
        "my-toggle": MyToggle;
        "my-toggle-content": MyToggleContent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-button": LocalJSX.MyButton & JSXBase.HTMLAttributes<HTMLMyButtonElement>;
            "my-button-scoped": LocalJSX.MyButtonScoped & JSXBase.HTMLAttributes<HTMLMyButtonScopedElement>;
            "my-checkbox": LocalJSX.MyCheckbox & JSXBase.HTMLAttributes<HTMLMyCheckboxElement>;
            "my-complex-props": LocalJSX.MyComplexProps & JSXBase.HTMLAttributes<HTMLMyComplexPropsElement>;
            "my-complex-props-scoped": LocalJSX.MyComplexPropsScoped & JSXBase.HTMLAttributes<HTMLMyComplexPropsScopedElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "my-component-scoped": LocalJSX.MyComponentScoped & JSXBase.HTMLAttributes<HTMLMyComponentScopedElement>;
            "my-counter": LocalJSX.MyCounter & JSXBase.HTMLAttributes<HTMLMyCounterElement>;
            "my-input": LocalJSX.MyInput & JSXBase.HTMLAttributes<HTMLMyInputElement>;
            "my-input-scoped": LocalJSX.MyInputScoped & JSXBase.HTMLAttributes<HTMLMyInputScopedElement>;
            "my-list": LocalJSX.MyList & JSXBase.HTMLAttributes<HTMLMyListElement>;
            "my-list-item": LocalJSX.MyListItem & JSXBase.HTMLAttributes<HTMLMyListItemElement>;
            "my-list-item-scoped": LocalJSX.MyListItemScoped & JSXBase.HTMLAttributes<HTMLMyListItemScopedElement>;
            "my-list-scoped": LocalJSX.MyListScoped & JSXBase.HTMLAttributes<HTMLMyListScopedElement>;
            "my-popover": LocalJSX.MyPopover & JSXBase.HTMLAttributes<HTMLMyPopoverElement>;
            "my-radio": LocalJSX.MyRadio & JSXBase.HTMLAttributes<HTMLMyRadioElement>;
            "my-radio-group": LocalJSX.MyRadioGroup & JSXBase.HTMLAttributes<HTMLMyRadioGroupElement>;
            "my-range": LocalJSX.MyRange & JSXBase.HTMLAttributes<HTMLMyRangeElement>;
            "my-toggle": LocalJSX.MyToggle & JSXBase.HTMLAttributes<HTMLMyToggleElement>;
            "my-toggle-content": LocalJSX.MyToggleContent & JSXBase.HTMLAttributes<HTMLMyToggleContentElement>;
        }
    }
}
